+------------------------+
 Binary Search Tree Notes
+------------------------+

Basically a linked-tree of Nodes

------------
Node object:
------------

 -----------
 |  .Data  |  Data can be template for any data type that supports < and > operators
 -----------
 | *L | *R |  *L = pointer to left Node, *R = pointer to right Node
 -----------

struct Node {

 int data;
 Node * left;
 Node * right;

};

If Left or Right have no Nodes to point to, default to NULL pointers
No Root, default to NULL empty list (tree)

------------
Tree object:
------------

Basically

          [Root]
          /    \
         /      \
      [Node]  [Node]
      /    \       \
   [Node][Node]  [Node]
         /    \
      [Node][Node]

class BinaryTree {

 private:
   Node * root;
 
 public:
   // Stuff like insert(n), search(n), remove(n), constructors, destructors, etc.

};


Example: Insert {5, 6, 3, 1, 4, 8}

          [ 5 ] 
          /   \
         /     \
      [ 3 ]   [ 6 ]
      /   \      \
   [ 1 ] [ 4 ]  [ 8 ]

5 is the root
1, 4, 8 are leafs

3 < 5, so Left
6 > 5, so Right
1 < 3, so Left
4 > 3, so Right
8 > 6, so Right

Example: Search(4)

          [ 5 ] 
          /   \
         /     \
      [ 3 ]   [ 6 ]
      /   \      \
   [ 1 ] [ 4 ]  [ 8 ]

4 < 5, go Left
4 > 3, go Right
4 = 4, found

Example: Search(8)

          [ 5 ] 
          /   \
         /     \
      [ 3 ]   [ 6 ]
      /   \      \
   [ 1 ] [ 4 ]  [ 8 ]

8 > 5, go Right
8 > 6, go Left
8 = 8, found

Example: Search(2)

          [ 5 ] 
          /   \
         /     \
      [ 3 ]   [ 6 ]
      /   \      \
   [ 1 ] [ 4 ]  [ 8 ]

2 < 5, go Left
2 < 3, go Left
2 > 1, go Right
1->Right == NULL, NOT FOUND

Example: Search(5)

          [ 5 ] 
          /   \
         /     \
      [ 3 ]   [ 6 ]
      /   \      \
   [ 1 ] [ 4 ]  [ 8 ]

5 = 5, found

Example: Insert {5, 3, 4, 1, 0, 2}

          [ 5 ] 
          /   
         /     
      [ 3 ]  
      /   \    
   [ 1 ] [ 4 ] 
   /   \
[ 0 ] [ 2 ]

5 is the root
0, 2, 4 are leafs

3 < 5, go Left
4 > 3, go Right
1 < 3, go Left
0 < 1, go Left
2 > 1, go Right

Example: Search(6)

          [ 5 ] 
          /   
         /     
      [ 3 ]  
      /   \    
   [ 1 ] [ 4 ] 
   /   \
[ 0 ] [ 2 ]

6 > 5, go Right
5->Right == NULL, NOT FOUND

Example: Search(2)

          [ 5 ] 
          /   
         /     
      [ 3 ]  
      /   \    
   [ 1 ] [ 4 ] 
   /   \
[ 0 ] [ 2 ]

2 < 5, go Left
2 < 3, go Left
2 > 1, go Right
2 = 2, found

